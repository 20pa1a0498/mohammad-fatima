//time conversion
public static String timeConversion(String s) {
    int hourInt = Integer.parseInt(s.substring(0,2));
        String time = s.substring(8);
        time = time.toLowerCase();
        boolean night = time.equals("pm");
        if(night){
            if(hourInt != 12){ // check for time after noon PM
                hourInt += 12;
                return "" + hourInt + s.substring(2,8);
            }
        } else{
            if(hourInt == 12){ // check for midnight AM case
                return "00" + s.substring(2,8);
            }
        }
        return s.substring(0,8);
    }

}


//Minimax sum
public static void miniMaxSum(List<Integer> arr) {
     arr = arr.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());
        long sum = 0;
        for(int i=0;i<arr.size();i++){
            sum += arr.get(i);
        }
        System.out.printf("%d %d", sum-arr.get(arr.size()-1),sum-arr.get(0));
    }
}


//lonely integer
public static int lonelyinteger(List<Integer> a) {
        int[] arr = new int[101];
        Arrays.fill(arr, 0);
        for(int x: a){
            arr[x] = arr[x]+1;
        }
        for(int i=0;i<arr.length;i++){
            if(arr[i] == 1) return i;
        }
        return -1;
    }
    

//Pangrams
    public static String pangrams(String s) {
        int[] arr = new int[26];
        Arrays.fill(arr,0);
        for(char c: s.toCharArray()){
            if(Character.isAlphabetic(c)){
                arr[Character.toLowerCase(c)-'a'] = 1;
            }
        }
        for(int i=0;i<arr.length;i++){
            if(arr[i] == 0) return "not pangram";
        }
        return "pangram";
    }
}


//Flippingn bits
 public static long flippingBits(long n) {
    return ( ( (long)Math.pow(2,32) ) - 1 - n);
    }
}

//diagonal
public static int diagonalDifference(List<List<Integer>> arr) {
    int leftDiagonalSum = 0;
    for(int i = 0; i < arr.size(); i++) { //O(n)
        leftDiagonalSum += arr.get(i).get(i);
    }
    int rightDiagonalSum = 0;
    for(int i = 0; i < arr.size(); i++) { //O(n)
        rightDiagonalSum += arr.get(i).get((arr.size()-1) - i);
    }
    return Math.abs(leftDiagonalSum - rightDiagonalSum);
    }
}

//Plus minus
public static void plusMinus(List<Integer> arr) {
    // Write your code here
    float posCount = 0, negCount = 0, zerCount = 0;
    for(int i: arr){
        if(i > 0)
            posCount++;
        if(i < 0)
            negCount++;
        if(i == 0)
            zerCount++;
    }
    System.out.printf("%f%n", posCount/arr.size(), 6);
    System.out.printf("%f%n", negCount/arr.size(), 6);
    System.out.printf("%f%n", zerCount/arr.size(), 6);
    }
}

//sparse arrays
public static List<Integer> matchingStrings(List<String> strings, List<String> queries) {
        Map<String, Integer> frequencyMap = new HashMap<>();
        for(String s: strings){
            if(frequencyMap.containsKey(s)){
                frequencyMap.put(s, frequencyMap.get(s)+1);
            }else frequencyMap.put(s,1);
        }
        List<Integer> ret = new ArrayList<>();
        for(String q: queries){
            if(!frequencyMap.containsKey(q)){
                ret.add(0);
            }else ret.add(frequencyMap.get(q));
        }
        return ret;
    }


//Subarray division
public static int birthday(List<Integer> s, int d, int m) {
    
    int numWays = 0, sum = 0;

    for(int i = 0; i <= (s.size() - m); i++) {

        for(int j = i; j < i + m; j++) {
            sum += s.get(j);
        }

        if(sum == d) {
            numWays++;
        }

        sum = 0;
    }

    return numWays; 
    }

}

//Counting sort 1
public static List<Integer> countingSort(List<Integer> arr) {
        List<Integer> valueCountList = new ArrayList<>();
        for(int i = 0; i < 100; i++){
            valueCountList.add(0);
        }
        for(int value : arr){
            valueCountList.set(value, valueCountList.get(value)+1);
        }
        return valueCountList;
        }
    }
