//reverse linked list
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode newHead = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = newHead;
            newHead = head;
            head = next;
        }
        return newHead;
    }
}

//MIDDLE OF THE LINKEDLIST
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}

//marge two sortedlist
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if l1 == None:
            return l2

        if l2 == None:
            return l1

        if l1.val > l2.val:
            l1, l2 = l2, l1

        res = l1
        while l1 != None and l2 != None:
            temp = None
            while l1 != None and l1.val <= l2.val:
                temp = l1 
                l1 = l1.next
            temp.next = l2
            l1, l2 = l2, l1
        return res
